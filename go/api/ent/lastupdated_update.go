// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"urfu-abiturient-api/ent/lastupdated"
	"urfu-abiturient-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LastUpdatedUpdate is the builder for updating LastUpdated entities.
type LastUpdatedUpdate struct {
	config
	hooks    []Hook
	mutation *LastUpdatedMutation
}

// Where adds a new predicate for the LastUpdatedUpdate builder.
func (luu *LastUpdatedUpdate) Where(ps ...predicate.LastUpdated) *LastUpdatedUpdate {
	luu.mutation.predicates = append(luu.mutation.predicates, ps...)
	return luu
}

// SetLastUpdated sets the "last_updated" field.
func (luu *LastUpdatedUpdate) SetLastUpdated(t time.Time) *LastUpdatedUpdate {
	luu.mutation.SetLastUpdated(t)
	return luu
}

// Mutation returns the LastUpdatedMutation object of the builder.
func (luu *LastUpdatedUpdate) Mutation() *LastUpdatedMutation {
	return luu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (luu *LastUpdatedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(luu.hooks) == 0 {
		affected, err = luu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LastUpdatedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luu.mutation = mutation
			affected, err = luu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(luu.hooks) - 1; i >= 0; i-- {
			mut = luu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (luu *LastUpdatedUpdate) SaveX(ctx context.Context) int {
	affected, err := luu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (luu *LastUpdatedUpdate) Exec(ctx context.Context) error {
	_, err := luu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luu *LastUpdatedUpdate) ExecX(ctx context.Context) {
	if err := luu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luu *LastUpdatedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lastupdated.Table,
			Columns: lastupdated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lastupdated.FieldID,
			},
		},
	}
	if ps := luu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luu.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lastupdated.FieldLastUpdated,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, luu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lastupdated.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LastUpdatedUpdateOne is the builder for updating a single LastUpdated entity.
type LastUpdatedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LastUpdatedMutation
}

// SetLastUpdated sets the "last_updated" field.
func (luuo *LastUpdatedUpdateOne) SetLastUpdated(t time.Time) *LastUpdatedUpdateOne {
	luuo.mutation.SetLastUpdated(t)
	return luuo
}

// Mutation returns the LastUpdatedMutation object of the builder.
func (luuo *LastUpdatedUpdateOne) Mutation() *LastUpdatedMutation {
	return luuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luuo *LastUpdatedUpdateOne) Select(field string, fields ...string) *LastUpdatedUpdateOne {
	luuo.fields = append([]string{field}, fields...)
	return luuo
}

// Save executes the query and returns the updated LastUpdated entity.
func (luuo *LastUpdatedUpdateOne) Save(ctx context.Context) (*LastUpdated, error) {
	var (
		err  error
		node *LastUpdated
	)
	if len(luuo.hooks) == 0 {
		node, err = luuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LastUpdatedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luuo.mutation = mutation
			node, err = luuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luuo.hooks) - 1; i >= 0; i-- {
			mut = luuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luuo *LastUpdatedUpdateOne) SaveX(ctx context.Context) *LastUpdated {
	node, err := luuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luuo *LastUpdatedUpdateOne) Exec(ctx context.Context) error {
	_, err := luuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luuo *LastUpdatedUpdateOne) ExecX(ctx context.Context) {
	if err := luuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luuo *LastUpdatedUpdateOne) sqlSave(ctx context.Context) (_node *LastUpdated, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lastupdated.Table,
			Columns: lastupdated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lastupdated.FieldID,
			},
		},
	}
	id, ok := luuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LastUpdated.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := luuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lastupdated.FieldID)
		for _, f := range fields {
			if !lastupdated.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lastupdated.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luuo.mutation.LastUpdated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lastupdated.FieldLastUpdated,
		})
	}
	_node = &LastUpdated{config: luuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lastupdated.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
