// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"urfu-abiturient-api/ent/abituriententry"

	"entgo.io/ent/dialect/sql"
)

// AbiturientEntry is the model entity for the AbiturientEntry schema.
type AbiturientEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Number holds the value of the "number" field.
	Number int64 `json:"number,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// StatementGiven holds the value of the "statement_given" field.
	StatementGiven bool `json:"statement_given"`
	// OriginalGiven holds the value of the "original_given" field.
	OriginalGiven bool `json:"original_given"`
	// Speciality holds the value of the "speciality" field.
	Speciality string `json:"speciality,omitempty"`
	// Program holds the value of the "program" field.
	Program string `json:"program,omitempty"`
	// Form holds the value of the "form" field.
	Form abituriententry.Form `json:"form,omitempty"`
	// Basis holds the value of the "basis" field.
	Basis string `json:"basis,omitempty"`
	// Sum holds the value of the "sum" field.
	Sum int64 `json:"sum,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AbiturientEntry) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case abituriententry.FieldStatementGiven, abituriententry.FieldOriginalGiven:
			values[i] = new(sql.NullBool)
		case abituriententry.FieldID, abituriententry.FieldNumber, abituriententry.FieldSum:
			values[i] = new(sql.NullInt64)
		case abituriententry.FieldName, abituriententry.FieldStatus, abituriententry.FieldType, abituriententry.FieldSpeciality, abituriententry.FieldProgram, abituriententry.FieldForm, abituriententry.FieldBasis:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AbiturientEntry", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AbiturientEntry fields.
func (ae *AbiturientEntry) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case abituriententry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ae.ID = int(value.Int64)
		case abituriententry.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ae.Name = value.String
			}
		case abituriententry.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				ae.Number = value.Int64
			}
		case abituriententry.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ae.Status = value.String
			}
		case abituriententry.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ae.Type = value.String
			}
		case abituriententry.FieldStatementGiven:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field statement_given", values[i])
			} else if value.Valid {
				ae.StatementGiven = value.Bool
			}
		case abituriententry.FieldOriginalGiven:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field original_given", values[i])
			} else if value.Valid {
				ae.OriginalGiven = value.Bool
			}
		case abituriententry.FieldSpeciality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field speciality", values[i])
			} else if value.Valid {
				ae.Speciality = value.String
			}
		case abituriententry.FieldProgram:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program", values[i])
			} else if value.Valid {
				ae.Program = value.String
			}
		case abituriententry.FieldForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form", values[i])
			} else if value.Valid {
				ae.Form = abituriententry.Form(value.String)
			}
		case abituriententry.FieldBasis:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field basis", values[i])
			} else if value.Valid {
				ae.Basis = value.String
			}
		case abituriententry.FieldSum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sum", values[i])
			} else if value.Valid {
				ae.Sum = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AbiturientEntry.
// Note that you need to call AbiturientEntry.Unwrap() before calling this method if this AbiturientEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (ae *AbiturientEntry) Update() *AbiturientEntryUpdateOne {
	return (&AbiturientEntryClient{config: ae.config}).UpdateOne(ae)
}

// Unwrap unwraps the AbiturientEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ae *AbiturientEntry) Unwrap() *AbiturientEntry {
	tx, ok := ae.config.driver.(*txDriver)
	if !ok {
		panic("ent: AbiturientEntry is not a transactional entity")
	}
	ae.config.driver = tx.drv
	return ae
}

// String implements the fmt.Stringer.
func (ae *AbiturientEntry) String() string {
	var builder strings.Builder
	builder.WriteString("AbiturientEntry(")
	builder.WriteString(fmt.Sprintf("id=%v", ae.ID))
	builder.WriteString(", name=")
	builder.WriteString(ae.Name)
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", ae.Number))
	builder.WriteString(", status=")
	builder.WriteString(ae.Status)
	builder.WriteString(", type=")
	builder.WriteString(ae.Type)
	builder.WriteString(", statement_given=")
	builder.WriteString(fmt.Sprintf("%v", ae.StatementGiven))
	builder.WriteString(", original_given=")
	builder.WriteString(fmt.Sprintf("%v", ae.OriginalGiven))
	builder.WriteString(", speciality=")
	builder.WriteString(ae.Speciality)
	builder.WriteString(", program=")
	builder.WriteString(ae.Program)
	builder.WriteString(", form=")
	builder.WriteString(fmt.Sprintf("%v", ae.Form))
	builder.WriteString(", basis=")
	builder.WriteString(ae.Basis)
	builder.WriteString(", sum=")
	builder.WriteString(fmt.Sprintf("%v", ae.Sum))
	builder.WriteByte(')')
	return builder.String()
}

// AbiturientEntries is a parsable slice of AbiturientEntry.
type AbiturientEntries []*AbiturientEntry

func (ae AbiturientEntries) config(cfg config) {
	for _i := range ae {
		ae[_i].config = cfg
	}
}
