// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"urfu-abiturient-api/ent/lastupdated"

	"entgo.io/ent/dialect/sql"
)

// LastUpdated is the model entity for the LastUpdated schema.
type LastUpdated struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LastUpdated) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lastupdated.FieldID:
			values[i] = new(sql.NullInt64)
		case lastupdated.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LastUpdated", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LastUpdated fields.
func (lu *LastUpdated) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lastupdated.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lu.ID = int(value.Int64)
		case lastupdated.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				lu.LastUpdated = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LastUpdated.
// Note that you need to call LastUpdated.Unwrap() before calling this method if this LastUpdated
// was returned from a transaction, and the transaction was committed or rolled back.
func (lu *LastUpdated) Update() *LastUpdatedUpdateOne {
	return (&LastUpdatedClient{config: lu.config}).UpdateOne(lu)
}

// Unwrap unwraps the LastUpdated entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lu *LastUpdated) Unwrap() *LastUpdated {
	tx, ok := lu.config.driver.(*txDriver)
	if !ok {
		panic("ent: LastUpdated is not a transactional entity")
	}
	lu.config.driver = tx.drv
	return lu
}

// String implements the fmt.Stringer.
func (lu *LastUpdated) String() string {
	var builder strings.Builder
	builder.WriteString("LastUpdated(")
	builder.WriteString(fmt.Sprintf("id=%v", lu.ID))
	builder.WriteString(", last_updated=")
	builder.WriteString(lu.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LastUpdateds is a parsable slice of LastUpdated.
type LastUpdateds []*LastUpdated

func (lu LastUpdateds) config(cfg config) {
	for _i := range lu {
		lu[_i].config = cfg
	}
}
