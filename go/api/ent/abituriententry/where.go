// Code generated by entc, DO NOT EDIT.

package abituriententry

import (
	"urfu-abiturient-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// StatementGiven applies equality check predicate on the "statement_given" field. It's identical to StatementGivenEQ.
func StatementGiven(v bool) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatementGiven), v))
	})
}

// OriginalGiven applies equality check predicate on the "original_given" field. It's identical to OriginalGivenEQ.
func OriginalGiven(v bool) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalGiven), v))
	})
}

// Speciality applies equality check predicate on the "speciality" field. It's identical to SpecialityEQ.
func Speciality(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpeciality), v))
	})
}

// Program applies equality check predicate on the "program" field. It's identical to ProgramEQ.
func Program(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProgram), v))
	})
}

// Basis applies equality check predicate on the "basis" field. It's identical to BasisEQ.
func Basis(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBasis), v))
	})
}

// Sum applies equality check predicate on the "sum" field. It's identical to SumEQ.
func Sum(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSum), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNumber), v))
	})
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNumber), v))
	})
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int64) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNumber), v...))
	})
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int64) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNumber), v...))
	})
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNumber), v))
	})
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNumber), v))
	})
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNumber), v))
	})
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNumber), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// StatementGivenEQ applies the EQ predicate on the "statement_given" field.
func StatementGivenEQ(v bool) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatementGiven), v))
	})
}

// StatementGivenNEQ applies the NEQ predicate on the "statement_given" field.
func StatementGivenNEQ(v bool) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatementGiven), v))
	})
}

// OriginalGivenEQ applies the EQ predicate on the "original_given" field.
func OriginalGivenEQ(v bool) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalGiven), v))
	})
}

// OriginalGivenNEQ applies the NEQ predicate on the "original_given" field.
func OriginalGivenNEQ(v bool) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginalGiven), v))
	})
}

// SpecialityEQ applies the EQ predicate on the "speciality" field.
func SpecialityEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpeciality), v))
	})
}

// SpecialityNEQ applies the NEQ predicate on the "speciality" field.
func SpecialityNEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpeciality), v))
	})
}

// SpecialityIn applies the In predicate on the "speciality" field.
func SpecialityIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSpeciality), v...))
	})
}

// SpecialityNotIn applies the NotIn predicate on the "speciality" field.
func SpecialityNotIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSpeciality), v...))
	})
}

// SpecialityGT applies the GT predicate on the "speciality" field.
func SpecialityGT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpeciality), v))
	})
}

// SpecialityGTE applies the GTE predicate on the "speciality" field.
func SpecialityGTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpeciality), v))
	})
}

// SpecialityLT applies the LT predicate on the "speciality" field.
func SpecialityLT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpeciality), v))
	})
}

// SpecialityLTE applies the LTE predicate on the "speciality" field.
func SpecialityLTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpeciality), v))
	})
}

// SpecialityContains applies the Contains predicate on the "speciality" field.
func SpecialityContains(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpeciality), v))
	})
}

// SpecialityHasPrefix applies the HasPrefix predicate on the "speciality" field.
func SpecialityHasPrefix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpeciality), v))
	})
}

// SpecialityHasSuffix applies the HasSuffix predicate on the "speciality" field.
func SpecialityHasSuffix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpeciality), v))
	})
}

// SpecialityEqualFold applies the EqualFold predicate on the "speciality" field.
func SpecialityEqualFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpeciality), v))
	})
}

// SpecialityContainsFold applies the ContainsFold predicate on the "speciality" field.
func SpecialityContainsFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpeciality), v))
	})
}

// ProgramEQ applies the EQ predicate on the "program" field.
func ProgramEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProgram), v))
	})
}

// ProgramNEQ applies the NEQ predicate on the "program" field.
func ProgramNEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProgram), v))
	})
}

// ProgramIn applies the In predicate on the "program" field.
func ProgramIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProgram), v...))
	})
}

// ProgramNotIn applies the NotIn predicate on the "program" field.
func ProgramNotIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProgram), v...))
	})
}

// ProgramGT applies the GT predicate on the "program" field.
func ProgramGT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProgram), v))
	})
}

// ProgramGTE applies the GTE predicate on the "program" field.
func ProgramGTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProgram), v))
	})
}

// ProgramLT applies the LT predicate on the "program" field.
func ProgramLT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProgram), v))
	})
}

// ProgramLTE applies the LTE predicate on the "program" field.
func ProgramLTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProgram), v))
	})
}

// ProgramContains applies the Contains predicate on the "program" field.
func ProgramContains(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProgram), v))
	})
}

// ProgramHasPrefix applies the HasPrefix predicate on the "program" field.
func ProgramHasPrefix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProgram), v))
	})
}

// ProgramHasSuffix applies the HasSuffix predicate on the "program" field.
func ProgramHasSuffix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProgram), v))
	})
}

// ProgramEqualFold applies the EqualFold predicate on the "program" field.
func ProgramEqualFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProgram), v))
	})
}

// ProgramContainsFold applies the ContainsFold predicate on the "program" field.
func ProgramContainsFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProgram), v))
	})
}

// FormEQ applies the EQ predicate on the "form" field.
func FormEQ(v Form) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForm), v))
	})
}

// FormNEQ applies the NEQ predicate on the "form" field.
func FormNEQ(v Form) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForm), v))
	})
}

// FormIn applies the In predicate on the "form" field.
func FormIn(vs ...Form) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldForm), v...))
	})
}

// FormNotIn applies the NotIn predicate on the "form" field.
func FormNotIn(vs ...Form) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldForm), v...))
	})
}

// BasisEQ applies the EQ predicate on the "basis" field.
func BasisEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBasis), v))
	})
}

// BasisNEQ applies the NEQ predicate on the "basis" field.
func BasisNEQ(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBasis), v))
	})
}

// BasisIn applies the In predicate on the "basis" field.
func BasisIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBasis), v...))
	})
}

// BasisNotIn applies the NotIn predicate on the "basis" field.
func BasisNotIn(vs ...string) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBasis), v...))
	})
}

// BasisGT applies the GT predicate on the "basis" field.
func BasisGT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBasis), v))
	})
}

// BasisGTE applies the GTE predicate on the "basis" field.
func BasisGTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBasis), v))
	})
}

// BasisLT applies the LT predicate on the "basis" field.
func BasisLT(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBasis), v))
	})
}

// BasisLTE applies the LTE predicate on the "basis" field.
func BasisLTE(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBasis), v))
	})
}

// BasisContains applies the Contains predicate on the "basis" field.
func BasisContains(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBasis), v))
	})
}

// BasisHasPrefix applies the HasPrefix predicate on the "basis" field.
func BasisHasPrefix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBasis), v))
	})
}

// BasisHasSuffix applies the HasSuffix predicate on the "basis" field.
func BasisHasSuffix(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBasis), v))
	})
}

// BasisEqualFold applies the EqualFold predicate on the "basis" field.
func BasisEqualFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBasis), v))
	})
}

// BasisContainsFold applies the ContainsFold predicate on the "basis" field.
func BasisContainsFold(v string) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBasis), v))
	})
}

// SumEQ applies the EQ predicate on the "sum" field.
func SumEQ(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSum), v))
	})
}

// SumNEQ applies the NEQ predicate on the "sum" field.
func SumNEQ(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSum), v))
	})
}

// SumIn applies the In predicate on the "sum" field.
func SumIn(vs ...int64) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSum), v...))
	})
}

// SumNotIn applies the NotIn predicate on the "sum" field.
func SumNotIn(vs ...int64) predicate.AbiturientEntry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSum), v...))
	})
}

// SumGT applies the GT predicate on the "sum" field.
func SumGT(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSum), v))
	})
}

// SumGTE applies the GTE predicate on the "sum" field.
func SumGTE(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSum), v))
	})
}

// SumLT applies the LT predicate on the "sum" field.
func SumLT(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSum), v))
	})
}

// SumLTE applies the LTE predicate on the "sum" field.
func SumLTE(v int64) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSum), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AbiturientEntry) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AbiturientEntry) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AbiturientEntry) predicate.AbiturientEntry {
	return predicate.AbiturientEntry(func(s *sql.Selector) {
		p(s.Not())
	})
}
