// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"urfu-abiturient-api/ent/abituriententry"
	"urfu-abiturient-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbiturientEntryUpdate is the builder for updating AbiturientEntry entities.
type AbiturientEntryUpdate struct {
	config
	hooks    []Hook
	mutation *AbiturientEntryMutation
}

// Where adds a new predicate for the AbiturientEntryUpdate builder.
func (aeu *AbiturientEntryUpdate) Where(ps ...predicate.AbiturientEntry) *AbiturientEntryUpdate {
	aeu.mutation.predicates = append(aeu.mutation.predicates, ps...)
	return aeu
}

// SetName sets the "name" field.
func (aeu *AbiturientEntryUpdate) SetName(s string) *AbiturientEntryUpdate {
	aeu.mutation.SetName(s)
	return aeu
}

// SetNumber sets the "number" field.
func (aeu *AbiturientEntryUpdate) SetNumber(i int64) *AbiturientEntryUpdate {
	aeu.mutation.ResetNumber()
	aeu.mutation.SetNumber(i)
	return aeu
}

// AddNumber adds i to the "number" field.
func (aeu *AbiturientEntryUpdate) AddNumber(i int64) *AbiturientEntryUpdate {
	aeu.mutation.AddNumber(i)
	return aeu
}

// SetStatus sets the "status" field.
func (aeu *AbiturientEntryUpdate) SetStatus(s string) *AbiturientEntryUpdate {
	aeu.mutation.SetStatus(s)
	return aeu
}

// SetType sets the "type" field.
func (aeu *AbiturientEntryUpdate) SetType(s string) *AbiturientEntryUpdate {
	aeu.mutation.SetType(s)
	return aeu
}

// SetStatementGiven sets the "statement_given" field.
func (aeu *AbiturientEntryUpdate) SetStatementGiven(b bool) *AbiturientEntryUpdate {
	aeu.mutation.SetStatementGiven(b)
	return aeu
}

// SetNillableStatementGiven sets the "statement_given" field if the given value is not nil.
func (aeu *AbiturientEntryUpdate) SetNillableStatementGiven(b *bool) *AbiturientEntryUpdate {
	if b != nil {
		aeu.SetStatementGiven(*b)
	}
	return aeu
}

// SetOriginalGiven sets the "original_given" field.
func (aeu *AbiturientEntryUpdate) SetOriginalGiven(b bool) *AbiturientEntryUpdate {
	aeu.mutation.SetOriginalGiven(b)
	return aeu
}

// SetNillableOriginalGiven sets the "original_given" field if the given value is not nil.
func (aeu *AbiturientEntryUpdate) SetNillableOriginalGiven(b *bool) *AbiturientEntryUpdate {
	if b != nil {
		aeu.SetOriginalGiven(*b)
	}
	return aeu
}

// SetSpeciality sets the "speciality" field.
func (aeu *AbiturientEntryUpdate) SetSpeciality(s string) *AbiturientEntryUpdate {
	aeu.mutation.SetSpeciality(s)
	return aeu
}

// SetProgram sets the "program" field.
func (aeu *AbiturientEntryUpdate) SetProgram(s string) *AbiturientEntryUpdate {
	aeu.mutation.SetProgram(s)
	return aeu
}

// SetForm sets the "form" field.
func (aeu *AbiturientEntryUpdate) SetForm(a abituriententry.Form) *AbiturientEntryUpdate {
	aeu.mutation.SetForm(a)
	return aeu
}

// SetBasis sets the "basis" field.
func (aeu *AbiturientEntryUpdate) SetBasis(s string) *AbiturientEntryUpdate {
	aeu.mutation.SetBasis(s)
	return aeu
}

// SetSum sets the "sum" field.
func (aeu *AbiturientEntryUpdate) SetSum(i int64) *AbiturientEntryUpdate {
	aeu.mutation.ResetSum()
	aeu.mutation.SetSum(i)
	return aeu
}

// AddSum adds i to the "sum" field.
func (aeu *AbiturientEntryUpdate) AddSum(i int64) *AbiturientEntryUpdate {
	aeu.mutation.AddSum(i)
	return aeu
}

// Mutation returns the AbiturientEntryMutation object of the builder.
func (aeu *AbiturientEntryUpdate) Mutation() *AbiturientEntryMutation {
	return aeu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aeu *AbiturientEntryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aeu.hooks) == 0 {
		if err = aeu.check(); err != nil {
			return 0, err
		}
		affected, err = aeu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbiturientEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aeu.check(); err != nil {
				return 0, err
			}
			aeu.mutation = mutation
			affected, err = aeu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aeu.hooks) - 1; i >= 0; i-- {
			mut = aeu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aeu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aeu *AbiturientEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := aeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aeu *AbiturientEntryUpdate) Exec(ctx context.Context) error {
	_, err := aeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeu *AbiturientEntryUpdate) ExecX(ctx context.Context) {
	if err := aeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeu *AbiturientEntryUpdate) check() error {
	if v, ok := aeu.mutation.Name(); ok {
		if err := abituriententry.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := aeu.mutation.Form(); ok {
		if err := abituriententry.FormValidator(v); err != nil {
			return &ValidationError{Name: "form", err: fmt.Errorf("ent: validator failed for field \"form\": %w", err)}
		}
	}
	return nil
}

func (aeu *AbiturientEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abituriententry.Table,
			Columns: abituriententry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abituriententry.FieldID,
			},
		},
	}
	if ps := aeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldName,
		})
	}
	if value, ok := aeu.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldNumber,
		})
	}
	if value, ok := aeu.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldNumber,
		})
	}
	if value, ok := aeu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldStatus,
		})
	}
	if value, ok := aeu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldType,
		})
	}
	if value, ok := aeu.mutation.StatementGiven(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: abituriententry.FieldStatementGiven,
		})
	}
	if value, ok := aeu.mutation.OriginalGiven(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: abituriententry.FieldOriginalGiven,
		})
	}
	if value, ok := aeu.mutation.Speciality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldSpeciality,
		})
	}
	if value, ok := aeu.mutation.Program(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldProgram,
		})
	}
	if value, ok := aeu.mutation.Form(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: abituriententry.FieldForm,
		})
	}
	if value, ok := aeu.mutation.Basis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldBasis,
		})
	}
	if value, ok := aeu.mutation.Sum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldSum,
		})
	}
	if value, ok := aeu.mutation.AddedSum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldSum,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abituriententry.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AbiturientEntryUpdateOne is the builder for updating a single AbiturientEntry entity.
type AbiturientEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbiturientEntryMutation
}

// SetName sets the "name" field.
func (aeuo *AbiturientEntryUpdateOne) SetName(s string) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetName(s)
	return aeuo
}

// SetNumber sets the "number" field.
func (aeuo *AbiturientEntryUpdateOne) SetNumber(i int64) *AbiturientEntryUpdateOne {
	aeuo.mutation.ResetNumber()
	aeuo.mutation.SetNumber(i)
	return aeuo
}

// AddNumber adds i to the "number" field.
func (aeuo *AbiturientEntryUpdateOne) AddNumber(i int64) *AbiturientEntryUpdateOne {
	aeuo.mutation.AddNumber(i)
	return aeuo
}

// SetStatus sets the "status" field.
func (aeuo *AbiturientEntryUpdateOne) SetStatus(s string) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetStatus(s)
	return aeuo
}

// SetType sets the "type" field.
func (aeuo *AbiturientEntryUpdateOne) SetType(s string) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetType(s)
	return aeuo
}

// SetStatementGiven sets the "statement_given" field.
func (aeuo *AbiturientEntryUpdateOne) SetStatementGiven(b bool) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetStatementGiven(b)
	return aeuo
}

// SetNillableStatementGiven sets the "statement_given" field if the given value is not nil.
func (aeuo *AbiturientEntryUpdateOne) SetNillableStatementGiven(b *bool) *AbiturientEntryUpdateOne {
	if b != nil {
		aeuo.SetStatementGiven(*b)
	}
	return aeuo
}

// SetOriginalGiven sets the "original_given" field.
func (aeuo *AbiturientEntryUpdateOne) SetOriginalGiven(b bool) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetOriginalGiven(b)
	return aeuo
}

// SetNillableOriginalGiven sets the "original_given" field if the given value is not nil.
func (aeuo *AbiturientEntryUpdateOne) SetNillableOriginalGiven(b *bool) *AbiturientEntryUpdateOne {
	if b != nil {
		aeuo.SetOriginalGiven(*b)
	}
	return aeuo
}

// SetSpeciality sets the "speciality" field.
func (aeuo *AbiturientEntryUpdateOne) SetSpeciality(s string) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetSpeciality(s)
	return aeuo
}

// SetProgram sets the "program" field.
func (aeuo *AbiturientEntryUpdateOne) SetProgram(s string) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetProgram(s)
	return aeuo
}

// SetForm sets the "form" field.
func (aeuo *AbiturientEntryUpdateOne) SetForm(a abituriententry.Form) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetForm(a)
	return aeuo
}

// SetBasis sets the "basis" field.
func (aeuo *AbiturientEntryUpdateOne) SetBasis(s string) *AbiturientEntryUpdateOne {
	aeuo.mutation.SetBasis(s)
	return aeuo
}

// SetSum sets the "sum" field.
func (aeuo *AbiturientEntryUpdateOne) SetSum(i int64) *AbiturientEntryUpdateOne {
	aeuo.mutation.ResetSum()
	aeuo.mutation.SetSum(i)
	return aeuo
}

// AddSum adds i to the "sum" field.
func (aeuo *AbiturientEntryUpdateOne) AddSum(i int64) *AbiturientEntryUpdateOne {
	aeuo.mutation.AddSum(i)
	return aeuo
}

// Mutation returns the AbiturientEntryMutation object of the builder.
func (aeuo *AbiturientEntryUpdateOne) Mutation() *AbiturientEntryMutation {
	return aeuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeuo *AbiturientEntryUpdateOne) Select(field string, fields ...string) *AbiturientEntryUpdateOne {
	aeuo.fields = append([]string{field}, fields...)
	return aeuo
}

// Save executes the query and returns the updated AbiturientEntry entity.
func (aeuo *AbiturientEntryUpdateOne) Save(ctx context.Context) (*AbiturientEntry, error) {
	var (
		err  error
		node *AbiturientEntry
	)
	if len(aeuo.hooks) == 0 {
		if err = aeuo.check(); err != nil {
			return nil, err
		}
		node, err = aeuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbiturientEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aeuo.check(); err != nil {
				return nil, err
			}
			aeuo.mutation = mutation
			node, err = aeuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aeuo.hooks) - 1; i >= 0; i-- {
			mut = aeuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aeuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aeuo *AbiturientEntryUpdateOne) SaveX(ctx context.Context) *AbiturientEntry {
	node, err := aeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeuo *AbiturientEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := aeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeuo *AbiturientEntryUpdateOne) ExecX(ctx context.Context) {
	if err := aeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeuo *AbiturientEntryUpdateOne) check() error {
	if v, ok := aeuo.mutation.Name(); ok {
		if err := abituriententry.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := aeuo.mutation.Form(); ok {
		if err := abituriententry.FormValidator(v); err != nil {
			return &ValidationError{Name: "form", err: fmt.Errorf("ent: validator failed for field \"form\": %w", err)}
		}
	}
	return nil
}

func (aeuo *AbiturientEntryUpdateOne) sqlSave(ctx context.Context) (_node *AbiturientEntry, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   abituriententry.Table,
			Columns: abituriententry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abituriententry.FieldID,
			},
		},
	}
	id, ok := aeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AbiturientEntry.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abituriententry.FieldID)
		for _, f := range fields {
			if !abituriententry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abituriententry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldName,
		})
	}
	if value, ok := aeuo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldNumber,
		})
	}
	if value, ok := aeuo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldNumber,
		})
	}
	if value, ok := aeuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldStatus,
		})
	}
	if value, ok := aeuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldType,
		})
	}
	if value, ok := aeuo.mutation.StatementGiven(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: abituriententry.FieldStatementGiven,
		})
	}
	if value, ok := aeuo.mutation.OriginalGiven(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: abituriententry.FieldOriginalGiven,
		})
	}
	if value, ok := aeuo.mutation.Speciality(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldSpeciality,
		})
	}
	if value, ok := aeuo.mutation.Program(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldProgram,
		})
	}
	if value, ok := aeuo.mutation.Form(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: abituriententry.FieldForm,
		})
	}
	if value, ok := aeuo.mutation.Basis(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldBasis,
		})
	}
	if value, ok := aeuo.mutation.Sum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldSum,
		})
	}
	if value, ok := aeuo.mutation.AddedSum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldSum,
		})
	}
	_node = &AbiturientEntry{config: aeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abituriententry.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
