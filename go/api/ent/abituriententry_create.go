// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"urfu-abiturient-api/ent/abituriententry"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbiturientEntryCreate is the builder for creating a AbiturientEntry entity.
type AbiturientEntryCreate struct {
	config
	mutation *AbiturientEntryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (aec *AbiturientEntryCreate) SetName(s string) *AbiturientEntryCreate {
	aec.mutation.SetName(s)
	return aec
}

// SetNumber sets the "number" field.
func (aec *AbiturientEntryCreate) SetNumber(i int64) *AbiturientEntryCreate {
	aec.mutation.SetNumber(i)
	return aec
}

// SetStatus sets the "status" field.
func (aec *AbiturientEntryCreate) SetStatus(s string) *AbiturientEntryCreate {
	aec.mutation.SetStatus(s)
	return aec
}

// SetType sets the "type" field.
func (aec *AbiturientEntryCreate) SetType(s string) *AbiturientEntryCreate {
	aec.mutation.SetType(s)
	return aec
}

// SetStatementGiven sets the "statement_given" field.
func (aec *AbiturientEntryCreate) SetStatementGiven(b bool) *AbiturientEntryCreate {
	aec.mutation.SetStatementGiven(b)
	return aec
}

// SetNillableStatementGiven sets the "statement_given" field if the given value is not nil.
func (aec *AbiturientEntryCreate) SetNillableStatementGiven(b *bool) *AbiturientEntryCreate {
	if b != nil {
		aec.SetStatementGiven(*b)
	}
	return aec
}

// SetOriginalGiven sets the "original_given" field.
func (aec *AbiturientEntryCreate) SetOriginalGiven(b bool) *AbiturientEntryCreate {
	aec.mutation.SetOriginalGiven(b)
	return aec
}

// SetNillableOriginalGiven sets the "original_given" field if the given value is not nil.
func (aec *AbiturientEntryCreate) SetNillableOriginalGiven(b *bool) *AbiturientEntryCreate {
	if b != nil {
		aec.SetOriginalGiven(*b)
	}
	return aec
}

// SetSpeciality sets the "speciality" field.
func (aec *AbiturientEntryCreate) SetSpeciality(s string) *AbiturientEntryCreate {
	aec.mutation.SetSpeciality(s)
	return aec
}

// SetProgram sets the "program" field.
func (aec *AbiturientEntryCreate) SetProgram(s string) *AbiturientEntryCreate {
	aec.mutation.SetProgram(s)
	return aec
}

// SetForm sets the "form" field.
func (aec *AbiturientEntryCreate) SetForm(a abituriententry.Form) *AbiturientEntryCreate {
	aec.mutation.SetForm(a)
	return aec
}

// SetBasis sets the "basis" field.
func (aec *AbiturientEntryCreate) SetBasis(s string) *AbiturientEntryCreate {
	aec.mutation.SetBasis(s)
	return aec
}

// SetSum sets the "sum" field.
func (aec *AbiturientEntryCreate) SetSum(i int64) *AbiturientEntryCreate {
	aec.mutation.SetSum(i)
	return aec
}

// Mutation returns the AbiturientEntryMutation object of the builder.
func (aec *AbiturientEntryCreate) Mutation() *AbiturientEntryMutation {
	return aec.mutation
}

// Save creates the AbiturientEntry in the database.
func (aec *AbiturientEntryCreate) Save(ctx context.Context) (*AbiturientEntry, error) {
	var (
		err  error
		node *AbiturientEntry
	)
	aec.defaults()
	if len(aec.hooks) == 0 {
		if err = aec.check(); err != nil {
			return nil, err
		}
		node, err = aec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AbiturientEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aec.check(); err != nil {
				return nil, err
			}
			aec.mutation = mutation
			node, err = aec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aec.hooks) - 1; i >= 0; i-- {
			mut = aec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aec *AbiturientEntryCreate) SaveX(ctx context.Context) *AbiturientEntry {
	v, err := aec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (aec *AbiturientEntryCreate) defaults() {
	if _, ok := aec.mutation.StatementGiven(); !ok {
		v := abituriententry.DefaultStatementGiven
		aec.mutation.SetStatementGiven(v)
	}
	if _, ok := aec.mutation.OriginalGiven(); !ok {
		v := abituriententry.DefaultOriginalGiven
		aec.mutation.SetOriginalGiven(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aec *AbiturientEntryCreate) check() error {
	if _, ok := aec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := aec.mutation.Name(); ok {
		if err := abituriententry.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := aec.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New("ent: missing required field \"number\"")}
	}
	if _, ok := aec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := aec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := aec.mutation.StatementGiven(); !ok {
		return &ValidationError{Name: "statement_given", err: errors.New("ent: missing required field \"statement_given\"")}
	}
	if _, ok := aec.mutation.OriginalGiven(); !ok {
		return &ValidationError{Name: "original_given", err: errors.New("ent: missing required field \"original_given\"")}
	}
	if _, ok := aec.mutation.Speciality(); !ok {
		return &ValidationError{Name: "speciality", err: errors.New("ent: missing required field \"speciality\"")}
	}
	if _, ok := aec.mutation.Program(); !ok {
		return &ValidationError{Name: "program", err: errors.New("ent: missing required field \"program\"")}
	}
	if _, ok := aec.mutation.Form(); !ok {
		return &ValidationError{Name: "form", err: errors.New("ent: missing required field \"form\"")}
	}
	if v, ok := aec.mutation.Form(); ok {
		if err := abituriententry.FormValidator(v); err != nil {
			return &ValidationError{Name: "form", err: fmt.Errorf("ent: validator failed for field \"form\": %w", err)}
		}
	}
	if _, ok := aec.mutation.Basis(); !ok {
		return &ValidationError{Name: "basis", err: errors.New("ent: missing required field \"basis\"")}
	}
	if _, ok := aec.mutation.Sum(); !ok {
		return &ValidationError{Name: "sum", err: errors.New("ent: missing required field \"sum\"")}
	}
	return nil
}

func (aec *AbiturientEntryCreate) sqlSave(ctx context.Context) (*AbiturientEntry, error) {
	_node, _spec := aec.createSpec()
	if err := sqlgraph.CreateNode(ctx, aec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (aec *AbiturientEntryCreate) createSpec() (*AbiturientEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &AbiturientEntry{config: aec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: abituriententry.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: abituriententry.FieldID,
			},
		}
	)
	if value, ok := aec.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldName,
		})
		_node.Name = value
	}
	if value, ok := aec.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldNumber,
		})
		_node.Number = value
	}
	if value, ok := aec.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := aec.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldType,
		})
		_node.Type = value
	}
	if value, ok := aec.mutation.StatementGiven(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: abituriententry.FieldStatementGiven,
		})
		_node.StatementGiven = value
	}
	if value, ok := aec.mutation.OriginalGiven(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: abituriententry.FieldOriginalGiven,
		})
		_node.OriginalGiven = value
	}
	if value, ok := aec.mutation.Speciality(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldSpeciality,
		})
		_node.Speciality = value
	}
	if value, ok := aec.mutation.Program(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldProgram,
		})
		_node.Program = value
	}
	if value, ok := aec.mutation.Form(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: abituriententry.FieldForm,
		})
		_node.Form = value
	}
	if value, ok := aec.mutation.Basis(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: abituriententry.FieldBasis,
		})
		_node.Basis = value
	}
	if value, ok := aec.mutation.Sum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: abituriententry.FieldSum,
		})
		_node.Sum = value
	}
	return _node, _spec
}

// AbiturientEntryCreateBulk is the builder for creating many AbiturientEntry entities in bulk.
type AbiturientEntryCreateBulk struct {
	config
	builders []*AbiturientEntryCreate
}

// Save creates the AbiturientEntry entities in the database.
func (aecb *AbiturientEntryCreateBulk) Save(ctx context.Context) ([]*AbiturientEntry, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aecb.builders))
	nodes := make([]*AbiturientEntry, len(aecb.builders))
	mutators := make([]Mutator, len(aecb.builders))
	for i := range aecb.builders {
		func(i int, root context.Context) {
			builder := aecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AbiturientEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aecb *AbiturientEntryCreateBulk) SaveX(ctx context.Context) []*AbiturientEntry {
	v, err := aecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
